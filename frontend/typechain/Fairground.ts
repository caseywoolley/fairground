/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace Fairground {
  export type PropertyDetailsStruct = {
    id: PromiseOrValue<BigNumberish>;
    currentBid: PromiseOrValue<BigNumberish>;
    auctionEnd: PromiseOrValue<BigNumberish>;
    leaseEnd: PromiseOrValue<BigNumberish>;
    owner: PromiseOrValue<string>;
    recordedOwner: PromiseOrValue<string>;
    topBidder: PromiseOrValue<string>;
    timestamp: PromiseOrValue<BigNumberish>;
  };

  export type PropertyDetailsStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    string,
    string,
    BigNumber
  ] & {
    id: BigNumber;
    currentBid: BigNumber;
    auctionEnd: BigNumber;
    leaseEnd: BigNumber;
    owner: string;
    recordedOwner: string;
    topBidder: string;
    timestamp: BigNumber;
  };
}

export interface FairgroundInterface extends utils.Interface {
  functions: {
    "LeaseDuration()": FunctionFragment;
    "activeBid(uint256)": FunctionFragment;
    "activeReserve(uint256)": FunctionFragment;
    "admin()": FunctionFragment;
    "auctionDuration()": FunctionFragment;
    "auctionEndDate(uint256)": FunctionFragment;
    "communityFunds()": FunctionFragment;
    "currentBid(uint256)": FunctionFragment;
    "distributeFunds()": FunctionFragment;
    "increaseReserve(uint256)": FunctionFragment;
    "isAuctionExpired(uint256)": FunctionFragment;
    "isLeaseExpired(uint256)": FunctionFragment;
    "isOwner(uint256)": FunctionFragment;
    "leaseEndDate(uint256)": FunctionFragment;
    "mint(address)": FunctionFragment;
    "ownerOf(uint256)": FunctionFragment;
    "placeBid(uint256)": FunctionFragment;
    "priceToRentRatio()": FunctionFragment;
    "propertyDetail(uint256)": FunctionFragment;
    "propertyList(uint256,uint256)": FunctionFragment;
    "setAuctionDuration(uint48)": FunctionFragment;
    "setLeaseDuration(uint48)": FunctionFragment;
    "setPriceToRentRatio(uint8)": FunctionFragment;
    "targetBid(uint256,uint256)": FunctionFragment;
    "topBid(uint256)": FunctionFragment;
    "topBidder(uint256)": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "updateClaim(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "LeaseDuration"
      | "activeBid"
      | "activeReserve"
      | "admin"
      | "auctionDuration"
      | "auctionEndDate"
      | "communityFunds"
      | "currentBid"
      | "distributeFunds"
      | "increaseReserve"
      | "isAuctionExpired"
      | "isLeaseExpired"
      | "isOwner"
      | "leaseEndDate"
      | "mint"
      | "ownerOf"
      | "placeBid"
      | "priceToRentRatio"
      | "propertyDetail"
      | "propertyList"
      | "setAuctionDuration"
      | "setLeaseDuration"
      | "setPriceToRentRatio"
      | "targetBid"
      | "topBid"
      | "topBidder"
      | "totalSupply"
      | "updateClaim"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "LeaseDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "activeBid",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "activeReserve",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "auctionDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "auctionEndDate",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "communityFunds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentBid",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "distributeFunds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "increaseReserve",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isAuctionExpired",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isLeaseExpired",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isOwner",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "leaseEndDate",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "placeBid",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "priceToRentRatio",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "propertyDetail",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "propertyList",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setAuctionDuration",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setLeaseDuration",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPriceToRentRatio",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "targetBid",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "topBid",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "topBidder",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateClaim",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "LeaseDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "activeBid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "activeReserve",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "auctionDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "auctionEndDate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "communityFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "currentBid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "distributeFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseReserve",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAuctionExpired",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isLeaseExpired",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "leaseEndDate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "placeBid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "priceToRentRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "propertyDetail",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "propertyList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAuctionDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLeaseDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPriceToRentRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "targetBid", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "topBid", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "topBidder", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateClaim",
    data: BytesLike
  ): Result;

  events: {
    "BidPlaced(uint256,address,uint256)": EventFragment;
    "ReserveIncreased(uint256,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BidPlaced"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReserveIncreased"): EventFragment;
}

export interface BidPlacedEventObject {
  _id: BigNumber;
  _from: string;
  _value: BigNumber;
}
export type BidPlacedEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  BidPlacedEventObject
>;

export type BidPlacedEventFilter = TypedEventFilter<BidPlacedEvent>;

export interface ReserveIncreasedEventObject {
  _id: BigNumber;
  _from: string;
  _value: BigNumber;
}
export type ReserveIncreasedEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  ReserveIncreasedEventObject
>;

export type ReserveIncreasedEventFilter =
  TypedEventFilter<ReserveIncreasedEvent>;

export interface Fairground extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: FairgroundInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    LeaseDuration(overrides?: CallOverrides): Promise<[number]>;

    activeBid(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    activeReserve(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    admin(overrides?: CallOverrides): Promise<[string]>;

    auctionDuration(overrides?: CallOverrides): Promise<[number]>;

    auctionEndDate(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    communityFunds(overrides?: CallOverrides): Promise<[BigNumber]>;

    currentBid(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    distributeFunds(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    increaseReserve(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isAuctionExpired(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isLeaseExpired(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isOwner(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    leaseEndDate(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    mint(
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    ownerOf(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    placeBid(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    priceToRentRatio(overrides?: CallOverrides): Promise<[number]>;

    propertyDetail(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[Fairground.PropertyDetailsStructOutput]>;

    propertyList(
      pageNumber: PromiseOrValue<BigNumberish>,
      pageSize: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[Fairground.PropertyDetailsStructOutput[]]>;

    setAuctionDuration(
      duration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setLeaseDuration(
      duration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPriceToRentRatio(
      ratio: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    targetBid(
      tokenId: PromiseOrValue<BigNumberish>,
      target: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    topBid(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    topBidder(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    updateClaim(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  LeaseDuration(overrides?: CallOverrides): Promise<number>;

  activeBid(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  activeReserve(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  admin(overrides?: CallOverrides): Promise<string>;

  auctionDuration(overrides?: CallOverrides): Promise<number>;

  auctionEndDate(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  communityFunds(overrides?: CallOverrides): Promise<BigNumber>;

  currentBid(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  distributeFunds(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  increaseReserve(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isAuctionExpired(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isLeaseExpired(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isOwner(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  leaseEndDate(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  mint(
    to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  ownerOf(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  placeBid(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  priceToRentRatio(overrides?: CallOverrides): Promise<number>;

  propertyDetail(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<Fairground.PropertyDetailsStructOutput>;

  propertyList(
    pageNumber: PromiseOrValue<BigNumberish>,
    pageSize: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<Fairground.PropertyDetailsStructOutput[]>;

  setAuctionDuration(
    duration: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setLeaseDuration(
    duration: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPriceToRentRatio(
    ratio: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  targetBid(
    tokenId: PromiseOrValue<BigNumberish>,
    target: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  topBid(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  topBidder(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  updateClaim(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    LeaseDuration(overrides?: CallOverrides): Promise<number>;

    activeBid(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    activeReserve(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    admin(overrides?: CallOverrides): Promise<string>;

    auctionDuration(overrides?: CallOverrides): Promise<number>;

    auctionEndDate(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    communityFunds(overrides?: CallOverrides): Promise<BigNumber>;

    currentBid(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    distributeFunds(overrides?: CallOverrides): Promise<void>;

    increaseReserve(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    isAuctionExpired(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isLeaseExpired(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isOwner(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    leaseEndDate(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mint(to: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    ownerOf(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    placeBid(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    priceToRentRatio(overrides?: CallOverrides): Promise<number>;

    propertyDetail(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<Fairground.PropertyDetailsStructOutput>;

    propertyList(
      pageNumber: PromiseOrValue<BigNumberish>,
      pageSize: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<Fairground.PropertyDetailsStructOutput[]>;

    setAuctionDuration(
      duration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setLeaseDuration(
      duration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPriceToRentRatio(
      ratio: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    targetBid(
      tokenId: PromiseOrValue<BigNumberish>,
      target: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    topBid(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    topBidder(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    updateClaim(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "BidPlaced(uint256,address,uint256)"(
      _id?: PromiseOrValue<BigNumberish> | null,
      _from?: PromiseOrValue<string> | null,
      _value?: null
    ): BidPlacedEventFilter;
    BidPlaced(
      _id?: PromiseOrValue<BigNumberish> | null,
      _from?: PromiseOrValue<string> | null,
      _value?: null
    ): BidPlacedEventFilter;

    "ReserveIncreased(uint256,address,uint256)"(
      _id?: PromiseOrValue<BigNumberish> | null,
      _from?: PromiseOrValue<string> | null,
      _value?: null
    ): ReserveIncreasedEventFilter;
    ReserveIncreased(
      _id?: PromiseOrValue<BigNumberish> | null,
      _from?: PromiseOrValue<string> | null,
      _value?: null
    ): ReserveIncreasedEventFilter;
  };

  estimateGas: {
    LeaseDuration(overrides?: CallOverrides): Promise<BigNumber>;

    activeBid(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    activeReserve(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    admin(overrides?: CallOverrides): Promise<BigNumber>;

    auctionDuration(overrides?: CallOverrides): Promise<BigNumber>;

    auctionEndDate(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    communityFunds(overrides?: CallOverrides): Promise<BigNumber>;

    currentBid(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    distributeFunds(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    increaseReserve(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isAuctionExpired(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isLeaseExpired(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isOwner(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    leaseEndDate(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mint(
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    ownerOf(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    placeBid(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    priceToRentRatio(overrides?: CallOverrides): Promise<BigNumber>;

    propertyDetail(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    propertyList(
      pageNumber: PromiseOrValue<BigNumberish>,
      pageSize: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setAuctionDuration(
      duration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setLeaseDuration(
      duration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPriceToRentRatio(
      ratio: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    targetBid(
      tokenId: PromiseOrValue<BigNumberish>,
      target: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    topBid(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    topBidder(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    updateClaim(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    LeaseDuration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    activeBid(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    activeReserve(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    auctionDuration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    auctionEndDate(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    communityFunds(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    currentBid(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    distributeFunds(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    increaseReserve(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isAuctionExpired(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isLeaseExpired(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isOwner(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    leaseEndDate(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mint(
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    ownerOf(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    placeBid(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    priceToRentRatio(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    propertyDetail(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    propertyList(
      pageNumber: PromiseOrValue<BigNumberish>,
      pageSize: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setAuctionDuration(
      duration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setLeaseDuration(
      duration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPriceToRentRatio(
      ratio: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    targetBid(
      tokenId: PromiseOrValue<BigNumberish>,
      target: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    topBid(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    topBidder(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateClaim(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
