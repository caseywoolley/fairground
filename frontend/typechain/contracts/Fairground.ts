/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace Fairground {
  export type PropertyDetailsStruct = {
    id: PromiseOrValue<BigNumberish>;
    currentBid: PromiseOrValue<BigNumberish>;
    auctionEnd: PromiseOrValue<BigNumberish>;
    rentReset: PromiseOrValue<BigNumberish>;
    owner: PromiseOrValue<string>;
    recordedOwner: PromiseOrValue<string>;
    topBidder: PromiseOrValue<string>;
    timestamp: PromiseOrValue<BigNumberish>;
  };

  export type PropertyDetailsStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    string,
    string,
    BigNumber
  ] & {
    id: BigNumber;
    currentBid: BigNumber;
    auctionEnd: BigNumber;
    rentReset: BigNumber;
    owner: string;
    recordedOwner: string;
    topBidder: string;
    timestamp: BigNumber;
  };
}

export interface FairgroundInterface extends utils.Interface {
  functions: {
    "activeBid(uint256)": FunctionFragment;
    "activeReserve(uint256)": FunctionFragment;
    "auctionEndDate(uint256)": FunctionFragment;
    "communityFunds()": FunctionFragment;
    "currentBid(uint256)": FunctionFragment;
    "increaseReserve(uint256)": FunctionFragment;
    "isAuctionExpired(uint256)": FunctionFragment;
    "isOwner(uint256)": FunctionFragment;
    "isRentPeriodExpired(uint256)": FunctionFragment;
    "mint(address)": FunctionFragment;
    "ownerOf(uint256)": FunctionFragment;
    "placeBid(uint256)": FunctionFragment;
    "propertyDetail(uint256)": FunctionFragment;
    "propertyList(uint256,uint256)": FunctionFragment;
    "rentalPeriodEndDate(uint256)": FunctionFragment;
    "targetBid(uint256,uint256)": FunctionFragment;
    "topBid(uint256)": FunctionFragment;
    "topBidder(uint256)": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "updateClaim(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "activeBid"
      | "activeReserve"
      | "auctionEndDate"
      | "communityFunds"
      | "currentBid"
      | "increaseReserve"
      | "isAuctionExpired"
      | "isOwner"
      | "isRentPeriodExpired"
      | "mint"
      | "ownerOf"
      | "placeBid"
      | "propertyDetail"
      | "propertyList"
      | "rentalPeriodEndDate"
      | "targetBid"
      | "topBid"
      | "topBidder"
      | "totalSupply"
      | "updateClaim"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "activeBid",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "activeReserve",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "auctionEndDate",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "communityFunds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentBid",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseReserve",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isAuctionExpired",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isOwner",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isRentPeriodExpired",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "placeBid",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "propertyDetail",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "propertyList",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "rentalPeriodEndDate",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "targetBid",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "topBid",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "topBidder",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateClaim",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(functionFragment: "activeBid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "activeReserve",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "auctionEndDate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "communityFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "currentBid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "increaseReserve",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAuctionExpired",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isRentPeriodExpired",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "placeBid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "propertyDetail",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "propertyList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rentalPeriodEndDate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "targetBid", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "topBid", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "topBidder", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateClaim",
    data: BytesLike
  ): Result;

  events: {
    "LogBid(uint256,address,uint256)": EventFragment;
    "LogReserve(uint256,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LogBid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogReserve"): EventFragment;
}

export interface LogBidEventObject {
  _id: BigNumber;
  _from: string;
  _value: BigNumber;
}
export type LogBidEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  LogBidEventObject
>;

export type LogBidEventFilter = TypedEventFilter<LogBidEvent>;

export interface LogReserveEventObject {
  _id: BigNumber;
  _from: string;
  _value: BigNumber;
}
export type LogReserveEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  LogReserveEventObject
>;

export type LogReserveEventFilter = TypedEventFilter<LogReserveEvent>;

export interface Fairground extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: FairgroundInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    activeBid(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    activeReserve(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    auctionEndDate(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    communityFunds(overrides?: CallOverrides): Promise<[BigNumber]>;

    currentBid(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    increaseReserve(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isAuctionExpired(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isOwner(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isRentPeriodExpired(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    mint(
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    ownerOf(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    placeBid(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    propertyDetail(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[Fairground.PropertyDetailsStructOutput]>;

    propertyList(
      pageNumber: PromiseOrValue<BigNumberish>,
      pageSize: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[Fairground.PropertyDetailsStructOutput[]]>;

    rentalPeriodEndDate(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    targetBid(
      tokenId: PromiseOrValue<BigNumberish>,
      target: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    topBid(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    topBidder(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    updateClaim(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  activeBid(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  activeReserve(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  auctionEndDate(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  communityFunds(overrides?: CallOverrides): Promise<BigNumber>;

  currentBid(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  increaseReserve(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isAuctionExpired(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isOwner(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isRentPeriodExpired(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  mint(
    to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  ownerOf(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  placeBid(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  propertyDetail(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<Fairground.PropertyDetailsStructOutput>;

  propertyList(
    pageNumber: PromiseOrValue<BigNumberish>,
    pageSize: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<Fairground.PropertyDetailsStructOutput[]>;

  rentalPeriodEndDate(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  targetBid(
    tokenId: PromiseOrValue<BigNumberish>,
    target: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  topBid(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  topBidder(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  updateClaim(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    activeBid(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    activeReserve(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    auctionEndDate(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    communityFunds(overrides?: CallOverrides): Promise<BigNumber>;

    currentBid(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    increaseReserve(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    isAuctionExpired(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isOwner(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isRentPeriodExpired(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    mint(to: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    ownerOf(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    placeBid(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    propertyDetail(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<Fairground.PropertyDetailsStructOutput>;

    propertyList(
      pageNumber: PromiseOrValue<BigNumberish>,
      pageSize: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<Fairground.PropertyDetailsStructOutput[]>;

    rentalPeriodEndDate(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    targetBid(
      tokenId: PromiseOrValue<BigNumberish>,
      target: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    topBid(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    topBidder(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    updateClaim(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "LogBid(uint256,address,uint256)"(
      _id?: PromiseOrValue<BigNumberish> | null,
      _from?: PromiseOrValue<string> | null,
      _value?: null
    ): LogBidEventFilter;
    LogBid(
      _id?: PromiseOrValue<BigNumberish> | null,
      _from?: PromiseOrValue<string> | null,
      _value?: null
    ): LogBidEventFilter;

    "LogReserve(uint256,address,uint256)"(
      _id?: PromiseOrValue<BigNumberish> | null,
      _from?: PromiseOrValue<string> | null,
      _value?: null
    ): LogReserveEventFilter;
    LogReserve(
      _id?: PromiseOrValue<BigNumberish> | null,
      _from?: PromiseOrValue<string> | null,
      _value?: null
    ): LogReserveEventFilter;
  };

  estimateGas: {
    activeBid(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    activeReserve(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    auctionEndDate(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    communityFunds(overrides?: CallOverrides): Promise<BigNumber>;

    currentBid(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    increaseReserve(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isAuctionExpired(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isOwner(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isRentPeriodExpired(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mint(
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    ownerOf(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    placeBid(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    propertyDetail(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    propertyList(
      pageNumber: PromiseOrValue<BigNumberish>,
      pageSize: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rentalPeriodEndDate(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    targetBid(
      tokenId: PromiseOrValue<BigNumberish>,
      target: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    topBid(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    topBidder(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    updateClaim(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    activeBid(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    activeReserve(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    auctionEndDate(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    communityFunds(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    currentBid(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    increaseReserve(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isAuctionExpired(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isOwner(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isRentPeriodExpired(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mint(
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    ownerOf(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    placeBid(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    propertyDetail(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    propertyList(
      pageNumber: PromiseOrValue<BigNumberish>,
      pageSize: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rentalPeriodEndDate(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    targetBid(
      tokenId: PromiseOrValue<BigNumberish>,
      target: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    topBid(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    topBidder(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateClaim(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
